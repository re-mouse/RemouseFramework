using System.Collections.Generic;using Remouse.Core;using Remouse.Serialization;namespace Remouse.Models.Messages{    public class WorldCommandsAtTickMessage : NetworkMessage    {        public HashSet<WorldCommand> Commands { get; private set; } = new HashSet<WorldCommand>();        public long Tick { get; private set; }                private List<CommandContainer> _commandContainers = new List<CommandContainer>();                public WorldCommandsAtTickMessage(HashSet<WorldCommand> commands, long tick)        {            Commands = commands;            Tick = tick;            foreach (var command in Commands)            {                _commandContainers.Add(new CommandContainer(command));            }        }        public override void Serialize(INetworkWriter writer)        {            writer.WriteList(_commandContainers);        }        public override void Deserialize(INetworkReader reader)        {            reader.ReadList(ref _commandContainers);        }    }    public struct CommandContainer : INetworkSerializable    {        public ushort commandTypeId;        public WorldCommand command;        public CommandContainer(WorldCommand command)        {            commandTypeId = TypeSerializer<WorldCommand>.GetTypeId(command);            this.command = command;        }        public void Serialize(INetworkWriter writer)        {            writer.WriteUShort(commandTypeId);            command.Serialize(writer);        }        public void Deserialize(INetworkReader reader)        {            commandTypeId = reader.ReadUShort();            command = TypeSerializer<WorldCommand>.GetNew(commandTypeId);            command.Deserialize(reader);        }    }}